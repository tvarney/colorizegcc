#!/usr/bin/env python
# -*- python -*- #

import re

file_re = re.compile(r"((?:[\.a-zA-Z0-9_-]*[/\\])*[\.a-zA-Z0-9]*\.(?:hpp|cpp))(?:\:([0-9]+(?:\:[0-9]+)?)?)?")
error_re = re.compile(r"(error)\:")
string_re = re.compile(r"([‘'][^'‘]*[’'])")
warning_re = re.compile(r"(warning)\:[^\[]*(?:\[([^\]]*)\])?")

c_black = 0
c_red = 1
c_green = 2
c_yellow = 3
c_blue = 4
c_purple = 5
c_cyan = 6
c_white = 7

a_bold = "1"
a_uline = "4"

def fg(colorcode):
    return str(30 + colorcode)
def bg(colorcode):
    return str(40 + colorcode)

def ansii(*args):
    if(len(args) == 0):
        return ""
    return "\033[{0}m".format(";".join(args))

normal_color = "\033[0m"
file_color = ansii(a_bold, a_uline, fg(c_blue))
line_color = ansii(a_bold, fg(c_purple))
error_color = ansii(a_bold, bg(c_red), fg(c_white))
string_color = ansii(a_bold, fg(c_green))
warning_color = ansii(a_bold, bg(c_yellow), fg(c_black))
wflag_color = ansii(a_bold, fg(c_yellow))

def multicolor_re(string, regex, colors):
    ngroups = regex.groups
    while(len(colors) != ngroups):
        colors.append(colors[0])
    
    newstr = ""
    end_pos = 0
    for match in regex.finditer(string):
        for i in range(0, ngroups):
            newstr += string[end_pos:match.start(1+i)] + colors[i] + string[match.start(1+i):match.end(1+i)] + normal_color
            end_pos = match.end(i+1)
    newstr += string[end_pos:]
    return newstr

def singlecolor_re(string, regex, color):
    newstr = ""
    end_pos = 0
    
    for match in regex.finditer(string):
        newstr += string[end_pos:match.start()] + color + string[match.start():match.end()] + normal_color
        end_pos = match.end()
    newstr += string[end_pos:]
    
    return newstr

def colorize_re(string, regex, color):
    if(type(color) == list):
        return multicolor_re(string, regex, color)
    else:
        return singlecolor_re(string, regex, color)

def parse_line(line):
    line = colorize_re(line, file_re, [file_color, line_color])
    line = colorize_re(line, error_re, error_color)
    line = colorize_re(line, string_re, string_color)
    line = colorize_re(line, warning_re, [warning_color, wflag_color])
    return line

if(__name__ == "__main__"):
    import sys
    for line in sys.stdin:
        sys.stdout.write(parse_line(line))
